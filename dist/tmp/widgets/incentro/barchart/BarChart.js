define(['react'], (function (react) { 'use strict';

    function BarChart({
      context,
      chartValue,
      colors,
      customSortOrder,
      chartName,
      disableIndicators,
      legendOrientation,
      roundedCorners,
      sortAttribute,
      sortOrder,
      unit,
      unitPosition
    }) {
      const [canRender, setCanRender] = react.useState(false);
      const containerRef = react.useRef([]);
      const colorArray = ["#003f5c", "#2f4b7c", "#665191", "#a05195", "#d45087", "#f95d6a", "#ff7c43", "#ffa600"];
      const [total, setTotal] = react.useState(0);
      const rounded = roundedCorners ? "barchart-chart--rounded" : null;
      const tooltipRef = react.useCallback(tooltipNode => {
        if (tooltipNode?.getBoundingClientRect().right >= window.innerWidth) {
          tooltipNode.classList.add("align-right");
        }
      }, []);
      function showTooltip(index) {
        index.classList.add("show-tooltip");
      }
      function hideTooltip(index) {
        index.classList.remove("show-tooltip");
      }
      react.useEffect(() => {
        function calcTotal() {
          const totals = [];
          context.items.map((item, index) => totals.push(Number(chartValue.get(context.items[index]).displayValue)));
          setTotal(totals.reduce((a, b) => a + b, 0));
        }
        function setSortOrder() {
          let sortInstrs = [];
          if (!customSortOrder && sortAttribute === "chartName" && chartName.sortable) {
            sortInstrs = [[chartName.id, sortOrder]];
          } else if (!customSortOrder && sortAttribute === "chartValue" && chartValue.sortable) {
            sortInstrs = [[chartValue.id, sortOrder]];
          } else if (customSortOrder && customSortOrder.sortable) {
            sortInstrs = [[customSortOrder.id, sortOrder]];
          }
          context.setSortOrder(sortInstrs);
        }
        if (context && context.status === "available" && context.items.length > 0) {
          setSortOrder();
          calcTotal();
          setCanRender(true);
        }
      }, [context, colors, customSortOrder, sortAttribute, chartName, chartValue, sortOrder]);
      if (canRender) {
        return react.createElement("div", {
          className: "barchart-widget"
        }, react.createElement("ul", {
          className: `barchart-legend barchart-legend--${legendOrientation}`
        }, context.items && context.items.map((item, index) => react.createElement("li", {
          key: item,
          ref: element => containerRef.current[index] = element,
          name: `barchart-legend-index-${index}`,
          onMouseEnter: () => showTooltip(containerRef.current[index]),
          onMouseLeave: () => hideTooltip(containerRef.current[index])
        }, react.createElement("span", {
          style: {
            backgroundColor: `var(--barchart-color-${[index]}, ${colors[index] ? colors[index].value : colorArray[index]})`
          }
        }), react.createElement("p", null, chartName.get(context.items[index]).displayValue)))), react.createElement("ul", {
          className: `barchart-chart ${rounded}`
        }, context.items && context.items.map((item, index) => react.createElement("li", {
          key: item,
          ref: element => containerRef.current[index] = element,
          name: `barchart-index-${index}`,
          onMouseEnter: () => showTooltip(containerRef.current[index]),
          onMouseLeave: () => hideTooltip(containerRef.current[index]),
          style: {
            flex: chartValue.get(context.items[index]).displayValue,
            backgroundColor: `var(--barchart-color-${[index]}, ${colors[index] ? colors[index].value : colorArray[index]})`
          }
        }, react.createElement("div", {
          className: "barchart-tooltip",
          ref: tooltipRef
        }, react.createElement("p", null, react.createElement("span", null, unitPosition === "before" && unit && unit, chartValue.get(context.items[index]).displayValue, unitPosition === "after" && unit && unit), " ", chartName.get(context.items[index]).displayValue))))), !disableIndicators && react.createElement("div", {
          className: "barchart-meter"
        }, react.createElement("div", {
          className: "item"
        }), react.createElement("div", {
          className: "item"
        }), react.createElement("div", {
          className: "item"
        }), react.createElement("div", {
          className: "item"
        }), react.createElement("div", {
          className: "item"
        }), react.createElement("div", {
          className: "item"
        }), react.createElement("div", {
          className: "item"
        }), react.createElement("div", {
          className: "item"
        }), react.createElement("div", {
          className: "item"
        }), react.createElement("div", {
          className: "item"
        }), react.createElement("div", {
          className: "item"
        })), !disableIndicators && react.createElement("div", {
          className: "barchart-indicators"
        }, react.createElement("span", {
          className: "barchart-indicator"
        }, unitPosition === "before" && unit && unit, "0", unitPosition === "after" && unit && unit), react.createElement("span", {
          className: "barchart-indicator"
        }, unitPosition === "before" && unit && unit, total / 2, unitPosition === "after" && unit && unit), react.createElement("span", {
          className: "barchart-indicator"
        }, unitPosition === "before" && unit && unit, total, unitPosition === "after" && unit && unit)));
      } else {
        return react.createElement("div", {
          className: "barchart-widget"
        });
      }
    }

    return BarChart;

}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmFyQ2hhcnQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9CYXJDaGFydC5qc3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFwiLi91aS9CYXJDaGFydC5jc3NcIjtcbmltcG9ydCB7IGNyZWF0ZUVsZW1lbnQsIHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QsIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQmFyQ2hhcnQoe1xuICAgIGNvbnRleHQsXG4gICAgY2hhcnRWYWx1ZSxcbiAgICBjb2xvcnMsXG4gICAgY3VzdG9tU29ydE9yZGVyLFxuICAgIGNoYXJ0TmFtZSxcbiAgICBkaXNhYmxlSW5kaWNhdG9ycyxcbiAgICBsZWdlbmRPcmllbnRhdGlvbixcbiAgICByb3VuZGVkQ29ybmVycyxcbiAgICBzb3J0QXR0cmlidXRlLFxuICAgIHNvcnRPcmRlcixcbiAgICB1bml0LFxuICAgIHVuaXRQb3NpdGlvblxufSkge1xuICAgIGNvbnN0IFtjYW5SZW5kZXIsIHNldENhblJlbmRlcl0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gICAgY29uc3QgY29udGFpbmVyUmVmID0gdXNlUmVmKFtdKTtcbiAgICBjb25zdCBjb2xvckFycmF5ID0gW1wiIzAwM2Y1Y1wiLCBcIiMyZjRiN2NcIiwgXCIjNjY1MTkxXCIsIFwiI2EwNTE5NVwiLCBcIiNkNDUwODdcIiwgXCIjZjk1ZDZhXCIsIFwiI2ZmN2M0M1wiLCBcIiNmZmE2MDBcIl07XG4gICAgY29uc3QgW3RvdGFsLCBzZXRUb3RhbF0gPSB1c2VTdGF0ZSgwKTtcbiAgICBjb25zdCByb3VuZGVkID0gcm91bmRlZENvcm5lcnMgPyBcImJhcmNoYXJ0LWNoYXJ0LS1yb3VuZGVkXCIgOiBudWxsO1xuXG4gICAgY29uc3QgdG9vbHRpcFJlZiA9IHVzZUNhbGxiYWNrKHRvb2x0aXBOb2RlID0+IHtcbiAgICAgICAgaWYgKHRvb2x0aXBOb2RlPy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5yaWdodCA+PSB3aW5kb3cuaW5uZXJXaWR0aCkge1xuICAgICAgICAgICAgdG9vbHRpcE5vZGUuY2xhc3NMaXN0LmFkZChcImFsaWduLXJpZ2h0XCIpO1xuICAgICAgICB9XG4gICAgfSwgW10pO1xuXG4gICAgZnVuY3Rpb24gc2hvd1Rvb2x0aXAoaW5kZXgpIHtcbiAgICAgICAgaW5kZXguY2xhc3NMaXN0LmFkZChcInNob3ctdG9vbHRpcFwiKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoaWRlVG9vbHRpcChpbmRleCkge1xuICAgICAgICBpbmRleC5jbGFzc0xpc3QucmVtb3ZlKFwic2hvdy10b29sdGlwXCIpO1xuICAgIH1cblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGZ1bmN0aW9uIGNhbGNUb3RhbCgpIHtcbiAgICAgICAgICAgIGNvbnN0IHRvdGFscyA9IFtdO1xuICAgICAgICAgICAgY29udGV4dC5pdGVtcy5tYXAoKGl0ZW0sIGluZGV4KSA9PiB0b3RhbHMucHVzaChOdW1iZXIoY2hhcnRWYWx1ZS5nZXQoY29udGV4dC5pdGVtc1tpbmRleF0pLmRpc3BsYXlWYWx1ZSkpKTtcbiAgICAgICAgICAgIHNldFRvdGFsKHRvdGFscy5yZWR1Y2UoKGEsIGIpID0+IGEgKyBiLCAwKSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gc2V0U29ydE9yZGVyKCkge1xuICAgICAgICAgICAgbGV0IHNvcnRJbnN0cnMgPSBbXTtcbiAgICAgICAgICAgIGlmICghY3VzdG9tU29ydE9yZGVyICYmIHNvcnRBdHRyaWJ1dGUgPT09IFwiY2hhcnROYW1lXCIgJiYgY2hhcnROYW1lLnNvcnRhYmxlKSB7XG4gICAgICAgICAgICAgICAgc29ydEluc3RycyA9IFtbY2hhcnROYW1lLmlkLCBzb3J0T3JkZXJdXTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIWN1c3RvbVNvcnRPcmRlciAmJiBzb3J0QXR0cmlidXRlID09PSBcImNoYXJ0VmFsdWVcIiAmJiBjaGFydFZhbHVlLnNvcnRhYmxlKSB7XG4gICAgICAgICAgICAgICAgc29ydEluc3RycyA9IFtbY2hhcnRWYWx1ZS5pZCwgc29ydE9yZGVyXV07XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGN1c3RvbVNvcnRPcmRlciAmJiBjdXN0b21Tb3J0T3JkZXIuc29ydGFibGUpIHtcbiAgICAgICAgICAgICAgICBzb3J0SW5zdHJzID0gW1tjdXN0b21Tb3J0T3JkZXIuaWQsIHNvcnRPcmRlcl1dO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGV4dC5zZXRTb3J0T3JkZXIoc29ydEluc3Rycyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udGV4dCAmJiBjb250ZXh0LnN0YXR1cyA9PT0gXCJhdmFpbGFibGVcIiAmJiBjb250ZXh0Lml0ZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHNldFNvcnRPcmRlcigpO1xuICAgICAgICAgICAgY2FsY1RvdGFsKCk7XG4gICAgICAgICAgICBzZXRDYW5SZW5kZXIodHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9LCBbY29udGV4dCwgY29sb3JzLCBjdXN0b21Tb3J0T3JkZXIsIHNvcnRBdHRyaWJ1dGUsIGNoYXJ0TmFtZSwgY2hhcnRWYWx1ZSwgc29ydE9yZGVyXSk7XG5cbiAgICBpZiAoY2FuUmVuZGVyKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJhcmNoYXJ0LXdpZGdldFwiPlxuICAgICAgICAgICAgICAgIDx1bCBjbGFzc05hbWU9e2BiYXJjaGFydC1sZWdlbmQgYmFyY2hhcnQtbGVnZW5kLS0ke2xlZ2VuZE9yaWVudGF0aW9ufWB9PlxuICAgICAgICAgICAgICAgICAgICB7Y29udGV4dC5pdGVtcyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5pdGVtcy5tYXAoKGl0ZW0sIGluZGV4KSA9PiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleT17aXRlbX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmPXtlbGVtZW50ID0+IChjb250YWluZXJSZWYuY3VycmVudFtpbmRleF0gPSBlbGVtZW50KX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT17YGJhcmNoYXJ0LWxlZ2VuZC1pbmRleC0ke2luZGV4fWB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uTW91c2VFbnRlcj17KCkgPT4gc2hvd1Rvb2x0aXAoY29udGFpbmVyUmVmLmN1cnJlbnRbaW5kZXhdKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25Nb3VzZUxlYXZlPXsoKSA9PiBoaWRlVG9vbHRpcChjb250YWluZXJSZWYuY3VycmVudFtpbmRleF0pfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBgdmFyKC0tYmFyY2hhcnQtY29sb3ItJHtbaW5kZXhdfSwgJHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzW2luZGV4XSA/IGNvbG9yc1tpbmRleF0udmFsdWUgOiBjb2xvckFycmF5W2luZGV4XVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pYFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+e2NoYXJ0TmFtZS5nZXQoY29udGV4dC5pdGVtc1tpbmRleF0pLmRpc3BsYXlWYWx1ZX08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT17YGJhcmNoYXJ0LWNoYXJ0ICR7cm91bmRlZH1gfT5cbiAgICAgICAgICAgICAgICAgICAge2NvbnRleHQuaXRlbXMgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuaXRlbXMubWFwKChpdGVtLCBpbmRleCkgPT4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9e2l0ZW19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZj17ZWxlbWVudCA9PiAoY29udGFpbmVyUmVmLmN1cnJlbnRbaW5kZXhdID0gZWxlbWVudCl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9e2BiYXJjaGFydC1pbmRleC0ke2luZGV4fWB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uTW91c2VFbnRlcj17KCkgPT4gc2hvd1Rvb2x0aXAoY29udGFpbmVyUmVmLmN1cnJlbnRbaW5kZXhdKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25Nb3VzZUxlYXZlPXsoKSA9PiBoaWRlVG9vbHRpcChjb250YWluZXJSZWYuY3VycmVudFtpbmRleF0pfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmxleDogY2hhcnRWYWx1ZS5nZXQoY29udGV4dC5pdGVtc1tpbmRleF0pLmRpc3BsYXlWYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogYHZhcigtLWJhcmNoYXJ0LWNvbG9yLSR7W2luZGV4XX0sICR7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzW2luZGV4XSA/IGNvbG9yc1tpbmRleF0udmFsdWUgOiBjb2xvckFycmF5W2luZGV4XVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJhcmNoYXJ0LXRvb2x0aXBcIiByZWY9e3Rvb2x0aXBSZWZ9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt1bml0UG9zaXRpb24gPT09IFwiYmVmb3JlXCIgJiYgdW5pdCAmJiB1bml0fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Y2hhcnRWYWx1ZS5nZXQoY29udGV4dC5pdGVtc1tpbmRleF0pLmRpc3BsYXlWYWx1ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3VuaXRQb3NpdGlvbiA9PT0gXCJhZnRlclwiICYmIHVuaXQgJiYgdW5pdH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+e1wiIFwifVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjaGFydE5hbWUuZ2V0KGNvbnRleHQuaXRlbXNbaW5kZXhdKS5kaXNwbGF5VmFsdWV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgICAgIHshZGlzYWJsZUluZGljYXRvcnMgJiYgKFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJhcmNoYXJ0LW1ldGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIml0ZW1cIj48L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaXRlbVwiPjwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpdGVtXCI+PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIml0ZW1cIj48L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaXRlbVwiPjwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpdGVtXCI+PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIml0ZW1cIj48L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaXRlbVwiPjwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpdGVtXCI+PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIml0ZW1cIj48L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaXRlbVwiPjwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICApfVxuXG4gICAgICAgICAgICAgICAgeyFkaXNhYmxlSW5kaWNhdG9ycyAmJiAoXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYmFyY2hhcnQtaW5kaWNhdG9yc1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiYmFyY2hhcnQtaW5kaWNhdG9yXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3VuaXRQb3NpdGlvbiA9PT0gXCJiZWZvcmVcIiAmJiB1bml0ICYmIHVuaXR9MHt1bml0UG9zaXRpb24gPT09IFwiYWZ0ZXJcIiAmJiB1bml0ICYmIHVuaXR9XG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJiYXJjaGFydC1pbmRpY2F0b3JcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dW5pdFBvc2l0aW9uID09PSBcImJlZm9yZVwiICYmIHVuaXQgJiYgdW5pdH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dG90YWwgLyAyfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt1bml0UG9zaXRpb24gPT09IFwiYWZ0ZXJcIiAmJiB1bml0ICYmIHVuaXR9XG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJiYXJjaGFydC1pbmRpY2F0b3JcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dW5pdFBvc2l0aW9uID09PSBcImJlZm9yZVwiICYmIHVuaXQgJiYgdW5pdH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dG90YWx9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3VuaXRQb3NpdGlvbiA9PT0gXCJhZnRlclwiICYmIHVuaXQgJiYgdW5pdH1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cImJhcmNoYXJ0LXdpZGdldFwiPjwvZGl2PjtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiQmFyQ2hhcnQiLCJjb250ZXh0IiwiY2hhcnRWYWx1ZSIsImNvbG9ycyIsImN1c3RvbVNvcnRPcmRlciIsImNoYXJ0TmFtZSIsImRpc2FibGVJbmRpY2F0b3JzIiwibGVnZW5kT3JpZW50YXRpb24iLCJyb3VuZGVkQ29ybmVycyIsInNvcnRBdHRyaWJ1dGUiLCJzb3J0T3JkZXIiLCJ1bml0IiwidW5pdFBvc2l0aW9uIiwiY2FuUmVuZGVyIiwic2V0Q2FuUmVuZGVyIiwidXNlU3RhdGUiLCJjb250YWluZXJSZWYiLCJ1c2VSZWYiLCJjb2xvckFycmF5IiwidG90YWwiLCJzZXRUb3RhbCIsInJvdW5kZWQiLCJ0b29sdGlwUmVmIiwidXNlQ2FsbGJhY2siLCJ0b29sdGlwTm9kZSIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInJpZ2h0Iiwid2luZG93IiwiaW5uZXJXaWR0aCIsImNsYXNzTGlzdCIsImFkZCIsInNob3dUb29sdGlwIiwiaW5kZXgiLCJoaWRlVG9vbHRpcCIsInJlbW92ZSIsInVzZUVmZmVjdCIsImNhbGNUb3RhbCIsInRvdGFscyIsIml0ZW1zIiwibWFwIiwiaXRlbSIsInB1c2giLCJOdW1iZXIiLCJnZXQiLCJkaXNwbGF5VmFsdWUiLCJyZWR1Y2UiLCJhIiwiYiIsInNldFNvcnRPcmRlciIsInNvcnRJbnN0cnMiLCJzb3J0YWJsZSIsImlkIiwic3RhdHVzIiwibGVuZ3RoIiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsImtleSIsInJlZiIsImVsZW1lbnQiLCJjdXJyZW50IiwibmFtZSIsIm9uTW91c2VFbnRlciIsIm9uTW91c2VMZWF2ZSIsInN0eWxlIiwiYmFja2dyb3VuZENvbG9yIiwidmFsdWUiLCJmbGV4Il0sIm1hcHBpbmdzIjoiOztJQUdlLFNBQVNB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QUMsRUFDSixDQUFDdEMsaUJBQWlCLElBQ2ZnRCxtQkFBQSxDQUFBLEtBQUEsRUFBQTtJQUFLQyxNQUFBQSxTQUFTLEVBQUMsZ0JBQUE7SUFBZ0IsS0FBQSxFQUMzQkQsbUJBQUEsQ0FBQSxLQUFBLEVBQUE7SUFBS0MsTUFBQUEsU0FBUyxFQUFDLE1BQUE7U0FBWSxDQUFDLEVBQzVCRCxtQkFBQSxDQUFBLEtBQUEsRUFBQTtJQUFLQyxNQUFBQSxTQUFTLEVBQUMsTUFBQTtTQUFZLENBQUMsRUFDNUJELG1CQUFBLENBQUEsS0FBQSxFQUFBO0lBQUtDLE1BQUFBLFNBQVMsRUFBQyxNQUFBO1NBQVksQ0FBQyxFQUM1QkQsbUJBQUEsQ0FBQSxLQUFBLEVBQUE7SUFBS0MsTUFBQUEsU0FBUyxFQUFDLE1BQUE7U0FBWSxDQUFDLEVBQzVCRCxtQkFBQSxDQUFBLEtBQUEsRUFBQTtJQUFLQyxNQUFBQSxTQUFTLEVBQUMsTUFBQTtTQUFZLENBQUMsRUFDNUJELG1CQUFBLENBQUEsS0FBQSxFQUFBO0lBQUtDLE1BQUFBLFNBQVMsRUFBQyxNQUFBO1NBQVksQ0FBQyxFQUM1QkQsbUJBQUEsQ0FBQSxLQUFBLEVBQUE7SUFBS0MsTUFBQUEsU0FBUyxFQUFDLE1BQUE7U0FBWSxDQUFDLEVBQzVCRCxtQkFBQSxDQUFBLEtBQUEsRUFBQTtJQUFLQyxNQUFBQSxTQUFTLEVBQUMsTUFBQTtTQUFZLENBQUMsRUFDNUJELG1CQUFBLENBQUEsS0FBQSxFQUFBO0lBQUtDLE1BQUFBLFNBQVMsRUFBQyxNQUFBO1NBQVksQ0FBQyxFQUM1QkQsbUJBQUEsQ0FBQSxLQUFBLEVBQUE7SUFBS0MsTUFBQUEsU0FBUyxFQUFDLE1BQUE7U0FBWSxDQUFDLEVBQzVCRCxtQkFBQSxDQUFBLEtBQUEsRUFBQTtJQUFLQyxNQUFBQSxTQUFTLEVBQUMsTUFBQTtJQUFNLEtBQU0sQ0FDMUIsQ0FDUixFQUVBLENBQUNqRCxpQkFBaUIsSUFDZmdELG1CQUFBLENBQUEsS0FBQSxFQUFBO0lBQUtDLE1BQUFBLFNBQVMsRUFBQyxxQkFBQTtJQUFxQixLQUFBLEVBQ2hDRCxtQkFBQSxDQUFBLE1BQUEsRUFBQTtJQUFNQyxNQUFBQSxTQUFTLEVBQUMsb0JBQUE7SUFBb0IsS0FBQSxFQUMvQjNDLFlBQVksS0FBSyxRQUFRLElBQUlELElBQUksSUFBSUEsSUFBSSxFQUFDLEdBQUMsRUFBQ0MsWUFBWSxLQUFLLE9BQU8sSUFBSUQsSUFBSSxJQUFJQSxJQUMvRSxDQUFDLEVBQ1AyQyxtQkFBQSxDQUFBLE1BQUEsRUFBQTtJQUFNQyxNQUFBQSxTQUFTLEVBQUMsb0JBQUE7U0FDWDNDLEVBQUFBLFlBQVksS0FBSyxRQUFRLElBQUlELElBQUksSUFBSUEsSUFBSSxFQUN6Q1EsS0FBSyxHQUFHLENBQUMsRUFDVFAsWUFBWSxLQUFLLE9BQU8sSUFBSUQsSUFBSSxJQUFJQSxJQUNuQyxDQUFDLEVBQ1AyQyxtQkFBQSxDQUFBLE1BQUEsRUFBQTtJQUFNQyxNQUFBQSxTQUFTLEVBQUMsb0JBQUE7SUFBb0IsS0FBQSxFQUMvQjNDLFlBQVksS0FBSyxRQUFRLElBQUlELElBQUksSUFBSUEsSUFBSSxFQUN6Q1EsS0FBSyxFQUNMUCxZQUFZLEtBQUssT0FBTyxJQUFJRCxJQUFJLElBQUlBLElBQ25DLENBQ0wsQ0FFUixDQUFDLENBQUE7SUFFZCxHQUFDLE1BQU07SUFDSCxJQUFBLE9BQU8yQyxtQkFBQSxDQUFBLEtBQUEsRUFBQTtJQUFLQyxNQUFBQSxTQUFTLEVBQUMsaUJBQUE7SUFBaUIsS0FBTSxDQUFDLENBQUE7SUFDbEQsR0FBQTtJQUNKOzs7Ozs7OzsifQ==
